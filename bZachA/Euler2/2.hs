import Control.Monad.State
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

-- fib 0 = 0
-- fib 1 = 1
-- fib n = fib (n -1) + fib (n - 2)


fib :: Int -> Int
fib n = flip evalState (0,1,0) $ do
  _ <- forM [0..(n-1)] $ \_ -> do
    (a,b,c) <- get
    if a+b `rem` 2 == 0 then
      put (b,a+b, c+a+b)
      else
      put (b, a+b, c)
  (_,_,c) <- get
  return c


main :: IO ()
main = do
  upperBoundInput <- getLine
  let upperBound = read upperBoundInput ::Int
  -- takeWhile (>= upperBound) [ i | i <- [1..]]
  -- foldl'

  -- let theAnswer = foldl (\base numToTest ->
  --                           if numToTest `rem` 5 == 0 || numToTest `rem` 3 == 0 then
  --                             base + numToTest
  --                           else
  --                             base
  --                           ) 0 [1..999]
  putStrLn $ "The answer is " -- ++ show theAnswer

-- fastSpecificVersion :: Int
-- fastSpecificVersion =
--   let
--     mult5 = [j * 5 | j <- [1..199]]
--     mult3 = [i * 3 | i <- [1..333]]
--   in
--     sum (mult5 ++ mult3)


-- -- foldl (\base numToTest ->
-- --                             if numToTest `rem` 5 == 0 || numToTest `rem` 3 == 0 then
-- --                               base + numToTest
-- --                             else
-- --                               base
-- --                             ) 0 [1..333]
